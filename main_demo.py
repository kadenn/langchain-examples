"""
LangChain Kapsamlƒ± Demo Script
Bu ana script t√ºm LangChain √∂zelliklerini sƒ±rayla √ßalƒ±≈ütƒ±rƒ±r ve men√º sistemi saƒülar.
Kullanƒ±cƒ± istediƒüi mod√ºl√º se√ßerek √ßalƒ±≈ütƒ±rabilir.
"""

import os
import sys
from dotenv import load_dotenv

# T√ºm mod√ºlleri import et
try:
    import importlib.util
    
    # Mod√ºl dosyalarƒ±nƒ± kontrol et
    modules = {
        "1": ("Temel LLM Kullanƒ±mƒ±", "1_basic_llm.py"),
        "2": ("Prompt Templates ve Chains", "2_prompts_and_chains.py"),
        "3": ("Memory Management", "3_memory_management.py"),
        "4": ("Document Loading", "4_document_loading.py"),
        "5": ("Vector Stores ve Embeddings", "5_vector_stores_embeddings.py"),
        "6": ("Agents ve Tools", "6_agents_and_tools.py"),
        "7": ("RAG Sistemi", "7_rag_system.py")
    }
    
except ImportError as e:
    print(f"Import hatasƒ±: {e}")
    sys.exit(1)

def check_environment():
    """
    √áevre deƒüi≈ükenlerini ve gereksinimleri kontrol et
    """
    print("=== √áEVRE KONTROLLERI ===")
    
    # .env dosyasƒ±nƒ± y√ºkle
    load_dotenv()
    
    # API anahtarƒ± kontrol√º
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ùå HATA: OPENAI_API_KEY environment variable bulunamadƒ±!")
        print("\n√á√∂z√ºm adƒ±mlarƒ±:")
        print("1. .env.example dosyasƒ±nƒ± .env olarak kopyalayƒ±n")
        print("2. .env dosyasƒ±na OpenAI API anahtarƒ±nƒ±zƒ± ekleyin")
        print("3. √ñrnek: OPENAI_API_KEY=your_api_key_here")
        return False
    
    # Temel k√ºt√ºphaneleri kontrol et
    required_modules = [
        'langchain',
        'langchain_openai',
        'openai',
        'chromadb',
        'faiss',
        'dotenv'
    ]
    
    missing_modules = []
    for module in required_modules:
        try:
            __import__(module.replace('-', '_'))
        except ImportError:
            missing_modules.append(module)
    
    if missing_modules:
        print(f"‚ùå Eksik k√ºt√ºphaneler: {', '.join(missing_modules)}")
        print("\nKurulum i√ßin √ßalƒ±≈ütƒ±rƒ±n:")
        print("pip install -r requirements.txt")
        return False
    
    print("‚úÖ T√ºm gereksinimler kar≈üƒ±landƒ±")
    return True

def display_menu():
    """
    Ana men√ºy√º g√∂ster
    """
    print("\n" + "="*60)
    print("           LANGCHAIN KAPSAMLI DEMO PROGRAMI")
    print("="*60)
    print("\nMevcut Mod√ºller:")
    print("-" * 40)
    
    for key, (name, filename) in modules.items():
        # Dosya varlƒ±ƒüƒ±nƒ± kontrol et
        if os.path.exists(filename):
            status = "‚úÖ"
        else:
            status = "‚ùå"
        print(f"{key}. {name} {status}")
    
    print("\nDiƒüer Se√ßenekler:")
    print("-" * 40)
    print("a. T√ºm mod√ºlleri sƒ±rayla √ßalƒ±≈ütƒ±r")
    print("h. Yardƒ±m ve kullanƒ±m bilgileri")
    print("q. √áƒ±kƒ±≈ü")
    print("\n" + "="*60)

def show_help():
    """
    Yardƒ±m bilgilerini g√∂ster
    """
    help_text = """
    LANGCHAIN DEMO PROGRAMI YARDIMI
    ================================
    
    Bu program LangChain k√ºt√ºphanesinin t√ºm temel √∂zelliklerini g√∂sterir:
    
    üìö Mod√ºl A√ßƒ±klamalarƒ±:
    
    1. Temel LLM Kullanƒ±mƒ±:
       - LLM modellerini kullanma
       - Farklƒ± model t√ºrleri
       - Streaming ve temel etkile≈üim
    
    2. Prompt Templates ve Chains:
       - Dinamik prompt olu≈üturma
       - Template kullanƒ±mƒ±
       - Chain'leri birbirine baƒülama
    
    3. Memory Management:
       - Konu≈üma ge√ßmi≈üi saklama
       - Farklƒ± hafƒ±za t√ºrleri
       - Context y√∂netimi
    
    4. Document Loading:
       - Belge y√ºkleme ve i≈üleme
       - Text splitting
       - Farklƒ± format desteƒüi
    
    5. Vector Stores ve Embeddings:
       - Anlamsal arama
       - Vector veritabanlarƒ±
       - Embedding olu≈üturma
    
    6. Agents ve Tools:
       - Akƒ±llƒ± aracƒ±lar
       - √ñzel ara√ßlar olu≈üturma
       - √áoklu adƒ±m problem √ß√∂zme
    
    7. RAG Sistemi:
       - Retrieval Augmented Generation
       - Belgelerle desteklenmi≈ü QA
       - Geli≈ümi≈ü arama teknikleri
    
    üîß Kurulum Gereksinimleri:
    - Python 3.8+
    - pip install -r requirements.txt
    - OpenAI API anahtarƒ± (.env dosyasƒ±nda)
    
    üí° Kullanƒ±m ƒ∞pu√ßlarƒ±:
    - Her mod√ºl baƒüƒ±msƒ±z √ßalƒ±≈üƒ±r
    - Ayrƒ±ntƒ±lƒ± a√ßƒ±klamalar kod i√ßinde
    - Hata durumunda API anahtarƒ±nƒ± kontrol edin
    
    üêõ Sorun Giderme:
    - API hatasƒ±: OPENAI_API_KEY kontrol edin
    - Import hatasƒ±: requirements.txt'i y√ºkleyin
    - Aƒü hatasƒ±: ƒ∞nternet baƒülantƒ±nƒ±zƒ± kontrol edin
    """
    print(help_text)

def run_module(module_key):
    """
    Belirli bir mod√ºl√º √ßalƒ±≈ütƒ±r
    """
    if module_key not in modules:
        print(f"‚ùå Ge√ßersiz mod√ºl se√ßimi: {module_key}")
        return False
    
    name, filename = modules[module_key]
    
    if not os.path.exists(filename):
        print(f"‚ùå Mod√ºl dosyasƒ± bulunamadƒ±: {filename}")
        return False
    
    print(f"\nüöÄ {name} mod√ºl√º √ßalƒ±≈ütƒ±rƒ±lƒ±yor...")
    print("-" * 50)
    
    try:
        # Mod√ºl√º dinamik olarak y√ºkle ve √ßalƒ±≈ütƒ±r
        spec = importlib.util.spec_from_file_location("module", filename)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        
        # main fonksiyonunu √ßalƒ±≈ütƒ±r
        if hasattr(module, 'main'):
            module.main()
        else:
            print(f"‚ùå {filename} dosyasƒ±nda main() fonksiyonu bulunamadƒ±")
            return False
            
        print(f"\n‚úÖ {name} mod√ºl√º ba≈üarƒ±yla tamamlandƒ±!")
        return True
        
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è  {name} mod√ºl√º kullanƒ±cƒ± tarafƒ±ndan durduruldu")
        return False
    except Exception as e:
        print(f"\n‚ùå {name} mod√ºl√ºnde hata olu≈ütu: {str(e)}")
        return False

def run_all_modules():
    """
    T√ºm mod√ºlleri sƒ±rayla √ßalƒ±≈ütƒ±r
    """
    print("\nüéØ T√úM MOD√úLLER √áALI≈ûTIRILACAK")
    print("="*50)
    
    response = input("Devam etmek istiyor musunuz? (y/N): ")
    if response.lower() not in ['y', 'yes', 'evet', 'e']:
        print("‚ùå ƒ∞≈ülem iptal edildi")
        return
    
    results = {}
    start_time = __import__('time').time()
    
    for key in sorted(modules.keys()):
        name, filename = modules[key]
        print(f"\nüì¶ {key}/{len(modules)}: {name}")
        print("=" * 60)
        
        success = run_module(key)
        results[key] = {
            'name': name,
            'success': success
        }
        
        if success:
            print(f"‚úÖ {name} - BA≈ûARILI")
        else:
            print(f"‚ùå {name} - BA≈ûARISIZ")
        
        # Mod√ºller arasƒ± kƒ±sa bekleme
        print("\n‚è≥ Sonraki mod√ºle ge√ßiliyor...")
        __import__('time').sleep(2)
    
    # √ñzet rapor
    end_time = __import__('time').time()
    total_time = end_time - start_time
    
    print("\n" + "="*60)
    print("           TAMAMLANMA RAPORU")
    print("="*60)
    
    successful = sum(1 for r in results.values() if r['success'])
    total = len(results)
    
    print(f"üìä Toplam Mod√ºl: {total}")
    print(f"‚úÖ Ba≈üarƒ±lƒ±: {successful}")
    print(f"‚ùå Ba≈üarƒ±sƒ±z: {total - successful}")
    print(f"‚è±Ô∏è  Toplam S√ºre: {total_time:.1f} saniye")
    
    print(f"\nüìã Detay Rapor:")
    for key, result in results.items():
        status = "‚úÖ BA≈ûARILI" if result['success'] else "‚ùå BA≈ûARISIZ"
        print(f"  {key}. {result['name']}: {status}")
    
    if successful == total:
        print(f"\nüéâ T√úM MOD√úLLER BA≈ûARIYLA TAMAMLANDI!")
    else:
        print(f"\n‚ö†Ô∏è  {total - successful} mod√ºlde sorun ya≈üandƒ±")

def interactive_mode():
    """
    Etkile≈üimli mod - kullanƒ±cƒ±dan s√ºrekli girdi al
    """
    print("\nüîÑ ETKƒ∞LE≈ûƒ∞MLƒ∞ MOD BA≈ûLATILDI")
    print("√áƒ±kmak i√ßin 'q' yazƒ±n")
    
    while True:
        try:
            display_menu()
            choice = input("\nSe√ßiminizi yapƒ±n: ").strip().lower()
            
            if choice == 'q':
                print("\nüëã G√ºle g√ºle!")
                break
            elif choice == 'h':
                show_help()
                input("\nDevam etmek i√ßin Enter'a basƒ±n...")
            elif choice == 'a':
                run_all_modules()
                input("\nDevam etmek i√ßin Enter'a basƒ±n...")
            elif choice in modules:
                run_module(choice)
                input("\nDevam etmek i√ßin Enter'a basƒ±n...")
            else:
                print(f"‚ùå Ge√ßersiz se√ßim: {choice}")
                input("Devam etmek i√ßin Enter'a basƒ±n...")
                
        except KeyboardInterrupt:
            print(f"\n\n‚ö†Ô∏è  Program kullanƒ±cƒ± tarafƒ±ndan durduruldu")
            break
        except EOFError:
            print(f"\n\nüëã Program sonlandƒ±rƒ±ldƒ±")
            break

def main():
    """
    Ana fonksiyon
    """
    print("üöÄ LangChain Demo Programƒ± Ba≈ülatƒ±lƒ±yor...")
    
    # √áevre kontrol√º
    if not check_environment():
        print("\n‚ùå √áevre kontrolleri ba≈üarƒ±sƒ±z. Program sonlandƒ±rƒ±lƒ±yor.")
        sys.exit(1)
    
    # Komut satƒ±rƒ± arg√ºmanlarƒ±nƒ± kontrol et
    if len(sys.argv) > 1:
        arg = sys.argv[1].lower()
        
        if arg == 'all':
            run_all_modules()
        elif arg == 'help' or arg == 'h':
            show_help()
        elif arg in modules:
            run_module(arg)
        else:
            print(f"‚ùå Ge√ßersiz arg√ºman: {arg}")
            print("Kullanƒ±m: python main_demo.py [1-7|all|help]")
            sys.exit(1)
    else:
        # Etkile≈üimli mod
        interactive_mode()

if __name__ == "__main__":
    main()